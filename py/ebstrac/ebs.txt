Unit tests for the ebs.py module.

This module primarily computes two graphs:

	1. a probability density function for ship date, and

	2. a box-and-whisker plot for developer ship date.

To compute these graphs, we need three arguments:

	* history: (user, ticket, estimated_hours, actual_hours, velocity)

	  Note that velocity is estimate / actual.

		>>> history = (
		... ('mark', 1, 1.0, 1.0, 1.0),
		... )

	* todo: (user, ticket, estimated_hours, actual_hours, left)

		>>> todo = (
		... ('mark', 2, 2.0, 1.0, 1.0),
		... )

	* dev_to_dailyworkhours: {'dev1': <hrs/day>, 'dev2': ...}

	  One entry for each unique user/date combination.

			   September 2010
			Su Mo Tu We Th Fr Sa
				  1  2  3  4
			 5  6  7  8  9 10 11
			12 13 14 15 16 17 18
			19 20 21 22 23 24 25
			26 27 28 29 30

		>>> dev_to_hrs = {'mark': 1.0}

The above three arguments define a very simple example, with

	* one user,
	* no difference between the historical estimate and the actual,
	* a task with one hour left on it, and
	* a user that works one hour per day

For this example, the probability density function data should have a
single point---it is 100% likely that this milestone will be done in
a day.

	>>> from ebs import history_to_plotdata
	>>> pdf, devs = history_to_plotdata(history, todo, dev_to_hrs)
	>>> len(pdf)
	1

The x-coordinate will be the expected ship date, and the y-coordinate
is the probability that the ship date will be on or less than that date.

For this toy, example, the one point has a y-value of 100.

	>>> x, y = pdf[0]
	>>> y
	100

Checking the x-coordinate is a bit trickier, it should be one workday after
today's date.  We'll use one of the utilities in the ebs module to
help us.

	>>> from datetime import date, timedelta
	>>> import ebs
	>>> shipdate = ebs.advance_n_workdays(date.today(), 1)
	>>> x - shipdate == timedelta(0) or "%s, %s" % (x, shipdate)
	True

The data for the developer box-and-whisker plot should have the following
fields for each developer: min, 1st quartile, median, 3rd quartile,
and maximum.

	>>> len(devs)
	1
	>>> len(devs[0])
	6
	>>> dev, min, q1, q2, q3, max = devs[0]
	>>> dev
	'mark'

In this contrived example, since there is no variation in the velocity,
all the date statistics are the same.

	>>> min - shipdate == timedelta(0) or "%s, %s" % (min, shipdate)
	True
	>>> q1 - shipdate == timedelta(0) or "%s, %s" % (q1, shipdate)
	True
	>>> q2 - shipdate == timedelta(0)  or "%s, %s" % (q2, shipdate)
	True
	>>> q3 - shipdate == timedelta(0)  or "%s, %s" % (q3, shipdate)
	True
	>>> max - shipdate == timedelta(0)  or "%s, %s" % (max, shipdate)
	True

======================================================================

A slightly more complicated example: two devs.

	* two devlopers:
		- one that works 5 hours a day, and
		- one that works 1 hour a day.
		- no difference between estimated and actual labor
	* two tasks:
		- one for each user
		- both with five hours of remaining effort.

----------------------------------------------------------------------


(dev, ticket, estimated, actual, velocity)

	>>> history = (
	... ('mark', 1, 1.0, 1.0, 1.0),
	... ('paul', 1, 1.0, 1.0, 1.0),
	... )

(dev, ticket, estimated_hours, actual_hours, left)

	>>> todo = (
	... ('mark', 2, 6.0, 1.0, 5.0),
	... ('paul', 3, 5.0, 0.0, 5.0),
	... )


(user, date, total_hours)

		   September 2010
		Su Mo Tu We Th Fr Sa
			  1  2  3  4
		 5  6  7  8  9 10 11
		12 13 14 15 16 17 18
		19 20 21 22 23 24 25
		26 27 28 29 30

	>>> dev_to_hrs = {'mark': 5.0, 'paul': 1.0}


There is still no variation in velocity, so the PDF should have one entry,
with 100% probability.

	>>> pdf, devs = history_to_plotdata(history, todo, dev_to_hrs)
	>>> len(pdf)
	1
	>>> dt, density = pdf[0]
	>>> density
	100

The ship date, given these inputs, should be five working days from now.

	>>> shipdate = ebs.advance_n_workdays(date.today(), 5)
	>>> dt - shipdate  == timedelta(0) or "%s, %s" % (dt, shipdate)
	True


======================================================================

A test where the velocity is not 1.0.

	* devloper #1:
		- works 5 hours a day
		- velocity = 0.5 (takes twice as long as estimate)
		- one task with five hours left
	* devloper #2:
		- works 1 hour a day
		- velocity = 2.0 (takes half as long as estimate)
		- one task with six hours left

	(velocity = est/act)

Dev #1 ship date:

	estimated five hours left
	------------------------ = 10 hours left, based on history.
	        velocity

	@ 5 hours/day, he should finish in today + 2 days.

Dev #2 ship date:

	estimated six hours left
	------------------------ = 3 hours left, based on history.
	        velocity

	@ 1 hour/day, he should finish in today + 3 days.

----------------------------------------------------------------------

(dev, ticket, estimated, actual, velocity)

	>>> history = (
	... ('mark', 1, 1.0, 2.0, 0.5),
	... ('paul', 1, 1.0, 0.5, 2.0),
	... )

(dev, ticket, estimated_hours, actual_hours, left)

	>>> todo = (
	... ('mark', 2, 6.0, 1.0, 5.0),
	... ('paul', 3, 6.0, 0.0, 6.0),
	... )


(user, date, total_hours)

		   September 2010
		Su Mo Tu We Th Fr Sa
			  1  2  3  4
		 5  6  7  8  9 10 11
		12 13 14 15 16 17 18
		19 20 21 22 23 24 25
		26 27 28 29 30

	>>> from datetime import date
	>>> dt1 = date(2010, 9, 1)
	>>> dt2 = date(2010, 9, 2)
	>>> dev_to_hrs = {'mark': 5.0, 'paul': 1.0}

No variation in velocity, so the PDF should have one entry, with 100%
probability.

	>>> pdf, devs = history_to_plotdata(history, todo, dev_to_hrs)
	>>> len(pdf)
	1
	>>> dt, density = pdf[0]
	>>> density
	100

The ship date, given these inputs, should be three working days from now.

	>>> shipdate = ebs.advance_n_workdays(date.today(), 3)
	>>> dt - shipdate  == timedelta(0) or "%s, %s" % (dt, shipdate)
	True

Developer stats should all be the same value, as again, no variation
in velocity.

	>>> len(devs)
	2
	>>> len(devs[0])
	6
	>>> today = date.today()
	>>> mark_dt = ebs.advance_n_workdays(today, 2)
	>>> dev = min = q1 = q2 = q3 = max = None
	>>> a = [x for x in devs if x[0] == 'mark']
	>>> dev, min, q1, q2, q3, max = a[0]
	>>> min - mark_dt == timedelta(0) or "%s, %s" % (min, mark_dt)
	True
	>>> q1 - mark_dt == timedelta(0) or "%s, %s" % (q1, mark_dt)
	True
	>>> q2 - mark_dt == timedelta(0)  or "%s, %s" % (q2, mark_dt)
	True
	>>> q3 - mark_dt == timedelta(0)  or "%s, %s" % (q3, mark_dt)
	True
	>>> max - mark_dt == timedelta(0)  or "%s, %s" % (max, mark_dt)
	True

	>>> dev = min = q1 = q2 = q3 = max = None
	>>> paul_dt = ebs.advance_n_workdays(today, 3)
	>>> a = [x for x in devs if x[0] == 'paul']
	>>> dev, min, q1, q2, q3, max = a[0]
	>>> min - paul_dt == timedelta(0) or "%s, %s" % (min, paul_dt)
	True
	>>> q1 - paul_dt == timedelta(0) or "%s, %s" % (q1, paul_dt)
	True
	>>> q2 - paul_dt == timedelta(0)  or "%s, %s" % (q2, paul_dt)
	True
	>>> q3 - paul_dt == timedelta(0)  or "%s, %s" % (q3, paul_dt)
	True
	>>> max - paul_dt == timedelta(0)  or "%s, %s" % (max, paul_dt)
	True

======================================================================

Some variability in velocity!

	* devloper #1:
		- works 1 hour a day
		- two equally-likely velocities
			- 0.5 (takes twice as long)
			- 1.0 (finishes exactly on time)
		- one task with 2 hours left
	(velocity = est/act)

Ship date:
	- 2 days from today
	- 4 days from today
	- each with 50% likelihood

----------------------------------------------------------------------

	>>> import ebs
	>>> from datetime import timedelta, date

(dev, ticket, estimated, actual, velocity)

	>>> history = (
	... ('mark', 1, 1.0, 2.0, 0.5),
	... ('mark', 2, 1.0, 1.0, 1.0),
	... )

(dev, ticket, estimated_hours, actual_hours, left)

	>>> todo = (
	... ('mark', 2, 6.0, 4.0, 2.0),
	... )

(user, date, total_hours)

	>>> dev_to_hrs = {'mark': 1.0}

	>>> pdf, devs = ebs.history_to_plotdata(history, todo, dev_to_hrs)
	>>> len(pdf)
	2

First ship date (around 50% likely, but may vary depending on specific
random sample we get in this test run) is two days from today.

	>>> from datetime import date
	>>> dt0 = ebs.advance_n_workdays(date.today(), 2)
	>>> dt1 = ebs.advance_n_workdays(date.today(), 4)

	>>> shipdate, density = pdf[0]
	>>> abs(density - 50) < 5 or "%d 50" % density
	True
	>>> dt0 - shipdate  == timedelta(0) or "%s, %s" % (dt, shipdate)
	True

Other ship date (also 50% likely) is four days from today.

	>>> shipdate, density = pdf[1]
	>>> density
	100
	>>> dt1 - shipdate  == timedelta(0) or "%s, %s" % (dt, shipdate)
	True
